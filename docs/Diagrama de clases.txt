@startuml

class Main {
  + main()
  + ejecucion(Log log, Log log_regex, boolean conTiempo, int tipoPolitica)
}

class Monitor {
  - RedDePetri rdp
  - Politica miPolitica
  - ColaTransiciones miColaTransiciones
  - Semaphore mutex
  - RealMatrix sensibilizadas
  - double[] colaNoDisparados
  - double[] m
  - boolean matarEjecucion
  + Monitor(RedDePetri redp, Politica mp)
  + dispararTransicion(int transicion)
}

class RedDePetri {
  - Integer[][] contadorIzq
  - Integer[][] contadorDer
  - Integer[] contadorUltimoSegmento
  - double[][] matrizIncidenciaEntrada
  - double[][] matrizIncidenciaSalida
  - double[][] marcadoActual
  - double[][] transicionesSensibilizadas
  - RealMatrix matrizIncidenciaEntradaMatrix
  - RealMatrix matrizIncidenciaSalidaMatrix
  - RealMatrix incidencia
  - RealMatrix marcadoActualMatrix
  - RealMatrix transicionesSensibilizadasMatrix
  - Log log
  - Log log_regex
  - long[] timeStamps
  - long[] alfa
  - long[] beta
  - boolean conTiempo
  - String secuenciaDisparos
  - boolean[] esperando
  - final int invariantesMax
  - int invCompletados
  + RedDePetri(Log log, Log log_regex)
  + setAlfa(int pos, int valor)
  + getInvariantesMax(): int
  + setConTiempo()
  + setSinTiempo()
  + dispararTransicionConTiempo(int transicion, Semaphore mutexMonitor): Boolean
  + getTransicionesSensibilizadas(): RealMatrix
  + actualizarContadorTransicion(int transicion)
  + getContadorTransicion(int transicion)
  + escribirLog()
  + invCompletado()
  + getInvCompletados(): int
  }

class Politica {
  - int tipoDePolitica
  - boolean conTiempo
  - boolean t1_antes_q_t2
  - boolean t5_antes_q_t6
  - boolean t9_antes_q_t10
  - RedDePetri rdp
  + Politica(RedDePetri rdp)
  + getConTiempo(): boolean
  + setConTiempo(boolean t)
  + setTipoPolitica(int t)
  + cual(double[] m): int
}

class Log {
  - File archivo
  - String ruta
  - Semaphore mutex
  + Log(String ruta)
  + escribirArchivo(String texto)
}

abstract class Procesador {
  - String nombre
  - String nombre_hilo
  - Monitor miMonitor
  - Log miLog
  - int transicion1
  - int transicion2
  - RedDePetri rdp
  + Procesador(String nombre, Monitor monitor, Log log, RedDePetri r, int transicion_1, int transicion_2)
  + getNombre(): String
  + setNombreHilo(String nombre)
  + getTransicion1(): int
  + getTransicion2(): int
  + getCorriendo(): boolean
}

class ColaTransiciones {
  - double[] lista
  - ArrayList<Semaphore> colaTransiciones
  + ColaTransiciones()
  + encolar(int transicion)
  + desencolar(int transicion)
  + quienesEstan(): double[]
}

class FabricaDeHilos {
  - int counter
  + FabricaDeHilos()
  + newThread(Runnable r): Thread
}

interface Runnable{}

interface ThreadFactory{}

package "Procesadores"{
  class GeneradorDeImagenes
  class CargaDeImagenes
  class AjustadorDeCalidad
  class Recortador
  class Exportador
}

Main *-- Log
Main *-- FabricaDeHilos
Main *-- Politica
Main *-- RedDePetri
Main *-- Monitor
Main *-- Procesadores
Main ..> Thread
Procesadores --|> Procesador
Procesadores ..> Runnable
Monitor --> Semaphore
Monitor o-- Politica
Monitor *-- ColaTransiciones
Monitor o-- RedDePetri
RedDePetri o-- Log
Procesador o-- Log
Procesador o-- Monitor
Procesador o-- RedDePetri
ColaTransiciones --> Semaphore
FabricaDeHilos ..> ThreadFactory
Log --> Semaphore

@enduml
