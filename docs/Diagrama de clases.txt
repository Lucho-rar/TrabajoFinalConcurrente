@startuml

class Main {
  + main()
  + ejecucion(String ruta,Log log, Log log_regex, boolean conTiempo, int tipoPolitica)
}

class Monitor {
  - RedDePetri rdp
  - Politica miPolitica
  - ColaTransiciones miColaTransiciones
  - Semaphore mutex
  - RealMatrix sensibilizadas
  - double[] colaNoDisparados
  - double[] m
  - Log log
  - Log log_regex
  - boolean corriendo
  + Monitor(RedDePetri redp, Politica mp, Log log, Log log_regex)
  + setMatarEjecucion()
  + getCorriendo(): boolean
  + dispararTransicion(int transicion, Procesador procesador)
  + recorrer(double[] m): boolean
  + contadorM(double[] m): int
  + contadorInvariantes(Imagen imagen)
}

class RedDePetri {
  - double[][] matrizIncidenciaEntrada
  - double[][] matrizIncidenciaSalida
  - int[][] matrizIvariantesTransicion
  - double[][] marcadoActual
  - double[][] transicionesSensibilizadas
  - int[][] contadorInvariantes
  - RealMatrix matrizIncidenciaEntradaMatrix
  - RealMatrix matrizIncidenciaSalidaMatrix
  - RealMatrix marcadoActualMatrix
  - RealMatrix transicionesSensibilizadasMatrix
  - Log log
  - long[] timeStamps
  - long[] alfa
  - long[] beta
  - boolean conTiempo
  - String secuenciaDisparos
  - boolean[] esperando
  - final int invariantesMax
  + RedDePetri(Log log)
  + getInvariantesMax(): int
  + setConTiempo()
  + setSinTiempo()
  + dispararTransicionConTiempo(int transicion, Semaphore mutexMonitor): Boolean
  + getSecuenciaDisparos(): String
  + testVentanaTiempo(long actual, int transicion): boolean
  + setNuevoTimeStamp(int transicion)
  + actualizarTimeStamp(RealMatrix previoDisparo, RealMatrix posteriorDisparo)
  + antesDeLaVentana(long actual, int transicion): boolean
  + setEsperando(int transicion)
  + resetEsperando(int transicion)
  + getTransicionesSensibilizadas(): RealMatrix
  + logearInvariantes()
  + actualizarContadorInvariante(Imagen imagen)
  + getCantidadTokensPlaza(int plaza): double
  + getContadorTotalInvariantes(): int
  + getCantidadPlazasRdP(): int
}

class Politica {
  - int tipoDePolitica
  - ArrayList<Set<Integer>> SegIzq
  - ArrayList<Set<Integer>> SegDer
  - Integer[][] contadorIzq
  - Integer[][] contadorDer
  - Integer[] contadorUltimoSegmento
  - ArrayList<Set<Integer>> segUltimo
  - boolean conTiempo
  - boolean t1_antes_q_t2
  - boolean t5_antes_q_t6
  - boolean t9_antes_q_t10
  + Politica()
  + getConTiempo(): boolean
  + setConTiempo(boolean t)
  + setTipoPolitica(int t)
  + actualizarContadorTransicion(int transicion)
  + getContadorTransicion(int transicion): int
  + cual(double[] m): int
}

class Imagen {
  - ArrayList<Integer> recorridoInvariante
  + Imagen()
  + agregarTransicion(int transicion)
  + getInvariante(): ArrayList<Integer>
}

class Log {
  - File archivo
  - String ruta
  - Semaphore mutex
  + Log(String ruta)
  + escribirArchivo(String texto)
}

abstract class Procesador {
  - String nombre
  - String nombre_hilo
  - Monitor miMonitor
  - Log miLog
  - int transicion1
  - ColaImagenes listaImagenOrigen
  - ColaImagenes listaImagenDestino
  + Procesador(String nombre, Monitor monitor, Log log, int transicion)
  + getNombre(): String
  + setNombreHilo(String nombre)
  + getTransicion1(): int
  + perteneceTransicion(int transicion): boolean
  + setOrigen(ColaImagenes origen)
  + setDestino(ColaImagenes destino)
  + operar(int transicion)
}

class ColaImagenes {
  - ArrayList<Imagen> lista
  - Semaphore mutex
  + ColaImagenes()
  + encolar(Imagen img, int transicion)
  + desencolar(): Imagen
  + estaVacia(): boolean
}

class ColaTransiciones {
  - double[] lista
  - ArrayList<Semaphore> colaTransiciones
  + ColaTransiciones()
  + encolar(int transicion)
  + desencolar(int transicion)
  + quienesEstan(): double[]
}

class FabricaDeHilos {
  - int counter
  + FabricaDeHilos()
  + newThread(Runnable r): Thread
}

interface Runnable{}

package "Procesadores"{
  class GeneradorDeImagenes
  class Receptor
  class CargaDeImagenes
  class TransferirAjustador
  class AjustadorDeCalidad
  class TransferirRecortador
  class Recortador
  class Exportador
}

Main *-- Log
Main *-- FabricaDeHilos
Main *-- Politica
Main *-- RedDePetri
Main *-- ColaImagenes
Main *-- Monitor
Main *-- Procesadores
Main ..> Thread
Procesadores --|> Procesador
Procesadores ..> Runnable
Monitor o-- RedDePetri
Monitor o-- Politica
Monitor *-- ColaTransiciones
Monitor o-- Log
Monitor o-- Procesador
Monitor --> Semaphore
RedDePetri o-- Log
Procesador o-- Log
Procesador *-- ColaImagenes
ColaImagenes o-- Imagen
ColaImagenes --> Semaphore
ColaTransiciones --> Semaphore
FabricaDeHilos ..> ThreadFactory
Log --> Semaphore

@enduml
